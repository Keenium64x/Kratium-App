/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StatePlanningRouteImport } from './routes/StatePlanning'
import { Route as File_SystemRouteImport } from './routes/File_System'
import { Route as IndexRouteImport } from './routes/index'

const StatePlanningRoute = StatePlanningRouteImport.update({
  id: '/StatePlanning',
  path: '/StatePlanning',
  getParentRoute: () => rootRouteImport,
} as any)
const File_SystemRoute = File_SystemRouteImport.update({
  id: '/File_System',
  path: '/File_System',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/File_System': typeof File_SystemRoute
  '/StatePlanning': typeof StatePlanningRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/File_System': typeof File_SystemRoute
  '/StatePlanning': typeof StatePlanningRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/File_System': typeof File_SystemRoute
  '/StatePlanning': typeof StatePlanningRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/File_System' | '/StatePlanning'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/File_System' | '/StatePlanning'
  id: '__root__' | '/' | '/File_System' | '/StatePlanning'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  File_SystemRoute: typeof File_SystemRoute
  StatePlanningRoute: typeof StatePlanningRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/StatePlanning': {
      id: '/StatePlanning'
      path: '/StatePlanning'
      fullPath: '/StatePlanning'
      preLoaderRoute: typeof StatePlanningRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/File_System': {
      id: '/File_System'
      path: '/File_System'
      fullPath: '/File_System'
      preLoaderRoute: typeof File_SystemRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  File_SystemRoute: File_SystemRoute,
  StatePlanningRoute: StatePlanningRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
